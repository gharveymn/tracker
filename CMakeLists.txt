CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(tracker
        VERSION 0.0.1
        LANGUAGES CXX)

# Package Information
SET(PACKAGE_AUTHOR     "gch")
SET(PACKAGE_NAME       "${PROJECT_NAME}")
SET(PACKAGE_VERSION    "${PROJECT_VERSION}")
SET(PACKAGE_SOURCE_DIR "${${PROJECT_NAME}_SOURCE_DIR}")
SET(PACKAGE_CMAKE_DIR  "${PACKAGE_SOURCE_DIR}/cmake")

# Sources
SET(INCLUDE_DIR  "${PACKAGE_SOURCE_DIR}/include")
SET(SOURCE_FILES "${INCLUDE_DIR}/tracker.hpp")

LIST(LENGTH SOURCE_FILES NUM_SOURCES)
IF(${NUM_SOURCES} EQUAL 1)
    SET(PACKAGE_INSTALL_PATH "${PACKAGE_AUTHOR}")
ELSE()
    SET(PACKAGE_INSTALL_PATH "${PACKAGE_AUTHOR}/${PACKAGE_NAME}")
ENDIF()

# Utilities
MACRO(MAKE_FRIENDLY in_str out_var)
    STRING(TOUPPER           "${in_str}"    AS_UPPER    )
    STRING(MAKE_C_IDENTIFIER "${AS_UPPER}"  "${out_var}")
ENDMACRO()
MAKE_FRIENDLY(${PACKAGE_NAME}   FRIENDLY_PACKAGE_NAME)
MAKE_FRIENDLY(${PACKAGE_AUTHOR} FRIENDLY_AUTHOR_NAME)

SET(RELATIVE_INSTALL_PATH "include/${PACKAGE_INSTALL_PATH}")
SET(PACKAGE_NAMESPACE     "${FRIENDLY_AUTHOR_NAME}::")

INCLUDE("${PACKAGE_CMAKE_DIR}/init-depends.cmake")

# Dependencies
SET(PACKAGE_DEPENDENCIES "optional_ref" "plf_list")

FOREACH(DEP ${PACKAGE_DEPENDENCIES})
  INITIALIZE_DEPENDENCY(${DEP})
ENDFOREACH()

# Options
OPTION("${FRIENDLY_PACKAGE_NAME}_BUILD_TESTS" "Set to ON to build tests" ON)

# Create Library
ADD_LIBRARY(${PACKAGE_NAME} INTERFACE)
ADD_LIBRARY("${PACKAGE_NAMESPACE}${PACKAGE_NAME}" ALIAS "${PACKAGE_NAME}")

TARGET_SOURCES(${PACKAGE_NAME}
        INTERFACE "$<BUILD_INTERFACE:${SOURCE_FILES}>")

TARGET_INCLUDE_DIRECTORIES(${PACKAGE_NAME}
        INTERFACE "$<BUILD_INTERFACE:${INCLUDE_DIR}>")

TARGET_INCLUDE_DIRECTORIES(${PACKAGE_NAME} SYSTEM INTERFACE
        "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${RELATIVE_INSTALL_PATH}>")

# Link Dependencies
TARGET_LINK_LIBRARIES(${PACKAGE_NAME} INTERFACE ${PACKAGE_DEPENDENCIES})

# Export Configuration
INCLUDE(CMakePackageConfigHelpers)
SET( CONFIG_EXPORT_NAME ${PACKAGE_NAME}-config       )
SET(VERSION_EXPORT_NAME ${CONFIG_EXPORT_NAME}-version)
SET(TARGETS_EXPORT_NAME ${PACKAGE_NAME}-targets      )

SET( CONFIG_FILE_NAME   ${CONFIG_EXPORT_NAME}.cmake )
SET(VERSION_FILE_NAME   ${VERSION_EXPORT_NAME}.cmake)
SET(TARGETS_FILE_NAME   ${TARGETS_EXPORT_NAME}.cmake)

SET( CONFIG_BUILD_FILE  "${PROJECT_BINARY_DIR}/${CONFIG_FILE_NAME}" )
SET(VERSION_BUILD_FILE  "${PROJECT_BINARY_DIR}/${VERSION_FILE_NAME}")
SET(TARGETS_BUILD_FILE  "${PROJECT_BINARY_DIR}/${TARGETS_FILE_NAME}")

SET(CONFIG_INSTALL_PATH "lib/cmake/${PACKAGE_NAME}")

CONFIGURE_PACKAGE_CONFIG_FILE("${PACKAGE_CMAKE_DIR}/config.cmake.in"
        "${CONFIG_BUILD_FILE}"
        INSTALL_DESTINATION "${CONFIG_INSTALL_PATH}")

WRITE_BASIC_PACKAGE_VERSION_FILE("${VERSION_BUILD_FILE}"
        VERSION "${PACKAGE_VERSION}"
        COMPATIBILITY ExactVersion)

EXPORT( TARGETS      "${PROJECT_NAME}"
        NAMESPACE    "${PACKAGE_NAMESPACE}"
        FILE         "${TARGETS_BUILD_FILE}")

# Install Configuration
INSTALL(FILES       "${CONFIG_BUILD_FILE}" "${VERSION_BUILD_FILE}"
        DESTINATION "${CONFIG_INSTALL_PATH}")

INSTALL(EXPORT      "${TARGETS_EXPORT_NAME}"
        DESTINATION "${CONFIG_INSTALL_PATH}"
        NAMESPACE   "${PACKAGE_NAMESPACE}")

# Install Target
INSTALL(TARGETS     ${PACKAGE_NAME}
        EXPORT      ${TARGETS_EXPORT_NAME}
        DESTINATION lib)

INSTALL(FILES       "${SOURCE_FILES}"
        DESTINATION "${RELATIVE_INSTALL_PATH}")

# Only include tests if we are at the top level
IF(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  ADD_SUBDIRECTORY(test)
ENDIF()
